{"ast":null,"code":"// src/utils/dice.js\nexport function rollDice(expr){// e.g. \"4d6*50\" or \"1d100\"\nconst[dicePart,multPart]=expr.split('*').map(s=>s.trim());const[count,sides]=dicePart.split('d').map(Number);let total=0;for(let i=0;i<count;i++){total+=Math.floor(Math.random()*sides)+1;}if(multPart)total=Math.round(total*Number(multPart));return total;}","map":{"version":3,"names":["rollDice","expr","dicePart","multPart","split","map","s","trim","count","sides","Number","total","i","Math","floor","random","round"],"sources":["/workspaces/mythras-char-gen/src/utils/dice.js"],"sourcesContent":["// src/utils/dice.js\nexport function rollDice(expr) {\n  // e.g. \"4d6*50\" or \"1d100\"\n  const [dicePart, multPart] = expr.split('*').map(s => s.trim());\n  const [count, sides] = dicePart.split('d').map(Number);\n  let total = 0;\n  for (let i = 0; i < count; i++) {\n    total += Math.floor(Math.random() * sides) + 1;\n  }\n  if (multPart) total = Math.round(total * Number(multPart));\n  return total;\n}\n"],"mappings":"AAAA;AACA,MAAO,SAAS,CAAAA,QAAQA,CAACC,IAAI,CAAE,CAC7B;AACA,KAAM,CAACC,QAAQ,CAAEC,QAAQ,CAAC,CAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,EAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAC/D,KAAM,CAACC,KAAK,CAAEC,KAAK,CAAC,CAAGP,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACK,MAAM,CAAC,CACtD,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGJ,KAAK,CAAEI,CAAC,EAAE,CAAE,CAC9BD,KAAK,EAAIE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGN,KAAK,CAAC,CAAG,CAAC,CAChD,CACA,GAAIN,QAAQ,CAAEQ,KAAK,CAAGE,IAAI,CAACG,KAAK,CAACL,KAAK,CAAGD,MAAM,CAACP,QAAQ,CAAC,CAAC,CAC1D,MAAO,CAAAQ,KAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}